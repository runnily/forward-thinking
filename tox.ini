[tox]
minversion = 3.15.0
skipsdist = true
skip_missing_interpreters = true
envlist = py{38}-{flake8,test},check-formatting
indexserver =
    default = https://artifactory.spotify.net/artifactory/api/pypi/pypi/simple/

[testenv]
basepython =
    check-formatting,format,isort: python3.8
    py38: python3.8
setenv =
    SOURCE = {toxinidir}
    TEST_SOURCE = {toxinidir}
    PYTHONPATH = {env:SOURCE}

passenv =
    test: GOOGLE_APPLICATION_CREDENTIALS
deps =
    test: -rrequirements.txt
    test: -rtest-requirements.txt
    flake8: flake8
    flake8: flake8-isort>=3.8.3
    flake8: isort
commands =
    test: coverage erase
    test: coverage run --source {env:SOURCE} -m pytest --junit-xml=junit.xml {env:TEST_SOURCE}
    test: coverage report -m --fail-under 50
    test: coverage xml -o cobertura.xml
    flake8: flake8 {env:SOURCE} {env:TEST_SOURCE}

[isort]
profile = black
multi_line_output = 3
line_length=100

[testenv:isort]
deps =
    isort
commands =
    isort --recursive {env:SOURCE} {env:TEST_SOURCE}

; This task simply checks the python formatting and fails tox if it's not formatted correctly.
;   when running on tingle, it's not useful for tingle to write these out since they won't be committed
;   it's better to run black on pre-commit and then have tox check that it's formatted during CI/CD.
; If this task fails on tingle CI/CD, run `tox -e format` locally in order to actually run the black formatter
[testenv:check-formatting]
deps =
    black
skip_install = true
commands =
    black --line-length 100 --check --diff {env:SOURCE} {env:TEST_SOURCE}

; This task is NOT run automatically when you run `tox`
; Run `tox -e format` in order to actually run the black formatter
[testenv:format]
deps =
    black
skip_install = true
commands =
    black --line-length 100 {env:SOURCE} {env:TEST_SOURCE}

[pytest]
python_classes =
    *Test
    Test*
junit_family = legacy

[flake8]
ignore = E402,E501,W503
